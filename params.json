{"name":"Django-ajax-selects","tagline":"jQuery UI-powered auto-complete fields for ForeignKey, ManyToMany and text fields","body":"\r\nEnables editing of `ForeignKey`, `ManyToMany` and `CharField` using jQuery UI Autocomplete.\r\n\r\nUser experience\r\n===============\r\n\r\nselecting:\r\n\r\n<img src='http://media.crucial-systems.com/posts/selecting.png'/>\r\n\r\nselected:\r\n\r\n<img src='http://media.crucial-systems.com/posts/selected.png'/>\r\n\r\n[Note: screen shots are from the older version. Styling has changed slightly]\r\n\r\n1. User types a few characters\r\n2. Ajax request sent to the server\r\n3. The dropdown menu shows choices\r\n4. User selects by clicking or using arrow keys\r\n5. Selected result displays in the \"deck\" area directly below the input field.\r\n6. User can click trashcan icon to remove a selected item\r\n\r\nFeatures\r\n========\r\n\r\n+ Works in any form including the Django Admin\r\n+ Popup to add a new item\r\n+ Admin inlines\r\n+ Compatible with widget/form media, staticfiles, asset compressors etc.\r\n+ Automatically Loads jQuery UI  mode allows easy installation by automatic inclusion of jQueryUI from the googleapis CDN\r\n+ Customize HTML, CSS and JS\r\n+ JQuery triggers allow you to customize interface behavior to respond when items are added or removed\r\n+ Default (but customizable) security prevents griefers from pilfering your data via JSON requests\r\n\r\n\r\n\r\nQuick Installation\r\n==================\r\n\r\nGet it\r\n\r\n    `pip install django-ajax-selects`\r\nor\r\n    download or checkout the distribution\r\n\r\n\r\nIn settings.py :\r\n\r\n    # add the app\r\n    INSTALLED_APPS = (\r\n                ...,\r\n                'django.contrib.staticfiles',\r\n                'ajax_select'\r\n                )\r\n\r\n    # define the lookup channels in use on the site\r\n    AJAX_LOOKUP_CHANNELS = {\r\n        #  simple: search Person.objects.filter(name__icontains=q)\r\n        'person'  : {'model': 'example.person', 'search_field': 'name'},\r\n        # define a custom lookup channel\r\n        'song'   : ('example.lookups', 'SongLookup')\r\n    }\r\n\r\n\r\nIn your urls.py:\r\n\r\n    from django.conf.urls import *\r\n\r\n    from django.contrib import admin\r\n    from ajax_select import urls as ajax_select_urls\r\n\r\n    admin.autodiscover()\r\n\r\n    urlpatterns = patterns('',\r\n        # include the lookup urls\r\n        (r'^admin/lookups/', include(ajax_select_urls)),\r\n        (r'^admin/', include(admin.site.urls)),\r\n    )\r\n\r\nFor Django 1.3 or earlier replace the first line by `from django.conf.urls.defaults import *`.\r\n\r\nIn your admin.py:\r\n\r\n    from django.contrib import admin\r\n    from ajax_select import make_ajax_form\r\n    from ajax_select.admin import AjaxSelectAdmin\r\n    from example.models import *\r\n\r\n    class PersonAdmin(admin.ModelAdmin):\r\n        pass\r\n    admin.site.register(Person,PersonAdmin)\r\n\r\n    class SongAdmin(AjaxSelectAdmin):\r\n        # create an ajax form class using the factory function\r\n        #                     model,fieldlist,   [form superclass]\r\n        form = make_ajax_form(Label,{'owner':'person'})\r\n    admin.site.register(Label,LabelAdmin)\r\n\r\nexample/lookups.py:\r\n\r\n    from ajax_select import LookupChannel\r\n\r\n    class SongLookup(LookupChannel):\r\n\r\n        model = Song\r\n\r\n        def get_query(self,q,request):\r\n            return Song.objects.filter(title__icontains=q).order_by('title')\r\n\r\n\r\nNOT SO QUICK INSTALLATION\r\n=========================\r\n\r\nThings that can be customized:\r\n\r\n+ define custom `LookupChannel` classes to customize:\r\n    + HTML formatting for the drop down results and the item-selected display\r\n    + custom search queries, ordering, user specific filtered results\r\n    + custom channel security (default is staff only)\r\n+ each channel can define its own template to add controls or javascript\r\n+ JS can respond to jQuery triggers when items are selected or removed\r\n+ custom CSS\r\n+ how and from where jQuery, jQueryUI, jQueryUI theme are loaded\r\n\r\n\r\nArchitecture\r\n============\r\n\r\nA single view services all of the ajax search requests, delegating the searches to named 'channels'.\r\n\r\nA simple channel can be specified in settings.py, a more complex one (with custom search, formatting, personalization or auth requirements) can be written in a lookups.py file.\r\n\r\nEach model that needs to be searched for has a channel defined for it. More than one channel may be defined for a Model to serve different needs such as public vs admin or channels that filter the query by specific categories etc. The channel also has access to the request and the user so it can personalize the query results.  Those channels can be reused by any Admin that wishes to lookup that model for a ManyToMany or ForeignKey field.\r\n\r\n\r\n\r\nThere are three model field types with corresponding form fields and widgets:\r\n\r\n<table>\r\n<tr><th>Database field</th><th>Form field</th><th>Form widget</th>\r\n<tr><td>models.CharField</td><td>AutoCompleteField</td><td>AutoCompleteWidget</td></tr>\r\n<tr><td>models.ForeignKey</td><td>AutoCompleteSelectField</td><td>AutoCompleteSelectWidget</td></tr>\r\n<tr><td>models.ManyToManyField</td><td>AutoCompleteSelectMultipleField</td><td>AutoCompleteSelectMultipleWidget</td></tr>\r\n</table>\r\n\r\nGenerally the helper functions documented below can be used to generate a complete form or an individual field (with widget) for a form.  In rare cases you might need to specify the ajax form field explicitly in your Form.\r\n\r\nExample App\r\n===========\r\n\r\nSee the example app for a full working admin site with many variations and comments. It installs quickly using virtualenv and sqllite and comes fully configured.\r\n\r\n\r\nsettings.py\r\n-----------\r\n\r\n#### AJAX_LOOKUP_CHANNELS\r\n\r\nDefines the available lookup channels.\r\n\r\n+ channel_name : {'model': 'app.modelname', 'search_field': 'name_of_field_to_search' }\r\n> This will create a channel automatically\r\n\r\n    channel_name : ( 'app.lookups', 'YourLookup' )\r\n        This points to a custom Lookup channel name YourLookup in app/lookups.py\r\n\r\n    AJAX_LOOKUP_CHANNELS = {\r\n        #   channel : dict with settings to create a channel\r\n        'person'  : {'model':'example.person', 'search_field':'name'},\r\n\r\n        # channel: ( module.where_lookup_is, ClassNameOfLookup )\r\n        'song'   : ('example.lookups', 'SongLookup'),\r\n    }\r\n\r\n#### AJAX_SELECT_BOOTSTRAP\r\n\r\nBy default it will include bootstrap.js in the widget media which will locate or load jQuery and jQuery-UI.\r\n\r\nIn other words, by default it will just work.\r\n\r\nIf you don't want it do that, in settings.py:\r\n    AJAX_SELECT_BOOTSTRAP = False\r\n\r\nFirst one wins:\r\n\r\n*  window.jQuery - if you already included jQuery on the page\r\n*  or loads: //ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\r\n\r\nLikewise for jQuery-UI:\r\n\r\n* window.jQuery.ui\r\n* or loads: //ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/jquery-ui.min.js\r\n  with theme: //ajax.googleapis.com/ajax/libs/jqueryui/1.8.24/themes/smoothness/jquery-ui.css\r\n\r\nIf you want your own custom theme then load jquery ui and your css first.\r\n\r\nWarning: the latest jQueryUI seems to have issues with the autocomplete.  I would rather switch to the much nicer select2 than try to get the latest jQuery UI to work.  Its a lot of js and css to load just for a dropdown.\r\n\r\n\r\nurls.py\r\n-------\r\n\r\nSimply include the ajax_select urls in your site's urlpatterns:\r\n\r\n    from django.conf.urls.defaults import *\r\n\r\n    from django.contrib import admin\r\n    from ajax_select import urls as ajax_select_urls\r\n\r\n    admin.autodiscover()\r\n\r\n    urlpatterns = patterns('',\r\n        (r'^admin/lookups/', include(ajax_select_urls)),\r\n        (r'^admin/', include(admin.site.urls)),\r\n    )\r\n\r\n\r\nlookups.py\r\n----------\r\n\r\nBy convention this is where you would define custom lookup channels\r\n\r\nSubclass `LookupChannel` and override any method you wish to customize.\r\n\r\n1.1x Upgrade note: previous versions did not have a parent class. The methods format_result and format_item have been renamed to format_match and format_item_display respectively.\r\nThose old lookup channels will still work and the previous methods will be used.  It is still better to adjust your lookup channels to inherit from the new base class.\r\n\r\n    from ajax_select import LookupChannel\r\n    from django.utils.html import escape\r\n    from django.db.models import Q\r\n    from example.models import *\r\n\r\n    class PersonLookup(LookupChannel):\r\n\r\n        model = Person\r\n\r\n        def get_query(self,q,request):\r\n            return Person.objects.filter(Q(name__icontains=q) | Q(email__istartswith=q)).order_by('name')\r\n\r\n        def get_result(self,obj):\r\n            u\"\"\" result is the simple text that is the completion of what the person typed \"\"\"\r\n            return obj.name\r\n\r\n        def format_match(self,obj):\r\n            \"\"\" (HTML) formatted item for display in the dropdown \"\"\"\r\n            return self.format_item_display(obj)\r\n\r\n        def format_item_display(self,obj):\r\n            \"\"\" (HTML) formatted item for displaying item in the selected deck area \"\"\"\r\n            return u\"%s<div><i>%s</i></div>\" % (escape(obj.name),escape(obj.email))\r\n\r\n    Note that raw strings should always be escaped with the escape() function\r\n\r\n#### Methods you can override in your `LookupChannel`\r\n\r\n\r\n###### model [property]\r\n\r\nThe model class this channel searches\r\n\r\n###### plugin_options [property, default={}]\r\n\r\nSet any options for the jQuery plugin. This includes:\r\n\r\n+ minLength\r\n+ autoFocus\r\n+ disabled\r\n+ position\r\n+ source - setting this would overide the normal ajax URL. could be used to add URL query params\r\n\r\nSee http://docs.jquery.com/UI/Autocomplete#options\r\n\r\nThe field or widget may also specify plugin_options that will overwrite those specified by the channel.\r\n\r\n###### min_length [property, default=1]\r\n\r\nThis is a jQuery plugin option.  It is preferred to set this in the plugin_options dict, but this older style attribute will still be honored.\r\n\r\nMinimum query length to return a result.  Large datasets can choke if they search too often with small queries.\r\nBetter to demand at least 2 or 3 characters.\r\nThis param is also used in jQuery's UI when filtering results from its own cache.\r\n\r\n###### search_field [property, optional]\r\n\r\nName of the field for the query to search with icontains.  This is used only in the default get_query implementation.\r\nUsually better to just implement your own get_query\r\n\r\n######  get_query(self,q,request)\r\n\r\nreturn a query set searching for the query string q, ordering as appropriate.\r\nEither implement this method yourself or set the search_field property.\r\nNote that you may return any iterable so you can even use yield and turn this method into a generator,\r\nor return an generator or list comprehension.\r\n\r\n######  get_result(self,obj):\r\n\r\nThe text result of autocompleting the entered query.  This is currently displayed only for a moment in the text field\r\nafter the user has selected the item.  Then the item is displayed in the item_display deck and the text field is cleared.\r\nFuture versions may offer different handlers for how to display the selected item(s).  In the current version you may\r\nadd extra script and use triggers to customize.\r\n\r\n######  format_match(self,obj):\r\n\r\n(HTML) formatted item for displaying item in the result dropdown\r\n\r\n######  format_item_display(self,obj):\r\n\r\n(HTML) formatted item for displaying item in the selected deck area (directly below the text field).\r\nNote that we use jQuery .position() to correctly place the deck area below the text field regardless of\r\nwhether the widget is in the admin, and admin inline or an outside form.  ie. it does not depend on django's\r\nadmin css to correctly place the selected display area.\r\n\r\n######  get_objects(self,ids):\r\n\r\nGet the currently selected objects when editing an existing model\r\n\r\nNote that the order of the ids supplied for ManyToMany fields is dependent on how the objects manager fetches it.\r\nie. what is returned by yourmodel.fieldname_set.all()\r\n\r\nIn most situations (especially postgres) this order is random, not the order that you originally added them in the interface.  With a bit of hacking I have convinced it to preserve the order [see OrderedManyToMany.md for solution]\r\n\r\n######  can_add(self, user, argmodel):\r\n\r\nCheck if the user has permission to add one of these models.\r\nThis enables the green popup +\r\nDefault is the standard django permission check\r\n\r\n######  check_auth(self,request):\r\n\r\nTo ensure that nobody can get your data via json simply by knowing the URL.\r\nThe default is to limit it to request.user.is_staff and raise a PermissionDenied exception.\r\nBy default this is an error with a 401 response, but your middleware may intercept and choose to do other things.\r\n\r\nPublic facing forms should write a custom `LookupChannel` to implement as needed.\r\nAlso you could choose to return HttpResponseForbidden(\"who are you?\") instead of raising PermissionDenied\r\n\r\n\r\nadmin.py\r\n--------\r\n\r\n#### make_ajax_form(model, fieldlist, superclass=ModelForm, show_help_text=False)\r\n\r\nIf your application does not otherwise require a custom Form class then you can use the make_ajax_form helper to create the entire form directly in admin.py.  See forms.py below for cases where you wish to make your own Form.\r\n\r\n+ *model*: your model\r\n+ *fieldlist*: a dict of {fieldname : channel_name, ... }\r\n+ *superclass*: [default ModelForm] Substitute a different superclass for the constructed Form class.\r\n+ *show_help_text*: [default False]\r\n    Leave blank [False] if using this form in a standard Admin.\r\n    Set it True for InlineAdmin classes or if making a form for use outside of the Admin.\r\n\r\n######Example\r\n\r\n    from ajax_select import make_ajax_form\r\n    from ajax_select.admin import AjaxSelectAdmin\r\n    from yourapp.models import YourModel\r\n\r\n    class YourModelAdmin(AjaxSelectAdmin):\r\n        # create an ajax form class using the factory function\r\n        #                     model, fieldlist,   [form superclass]\r\n        form = make_ajax_form(Label, {'owner': 'person'})\r\n\r\n    admin.site.register(YourModel,YourModelAdmin)\r\n\r\nYou may use AjaxSelectAdmin as a mixin class and multiple inherit if you have another Admin class that you would like to use.  You may also just add the hook into your own Admin class:\r\n\r\n    def get_form(self, request, obj=None, **kwargs):\r\n        form = super(YourAdminClass, self).get_form(request, obj, **kwargs)\r\n        autoselect_fields_check_can_add(form, self.model, request.user)\r\n        return form\r\n\r\nNote that ajax_selects does not need to be in an admin.  Popups will still use an admin view (the registered admin for the model being added), even if the form from where the popup was launched does not.\r\n\r\n\r\nforms.py\r\n--------\r\n\r\nsubclass ModelForm just as usual.  You may add ajax fields using the helper or directly.\r\n\r\n#### make_ajax_field(model, model_fieldname, channel, show_help_text=False, **kwargs)\r\n\r\nA factory function to makes an ajax field + widget.  The helper ensures things are set correctly and simplifies usage and imports thus reducing programmer error.  All kwargs are passed into the Field so it is no less customizable.\r\n\r\n+ *model*:              the model that this ModelForm is for\r\n+ *model_fieldname*:    the field on the model that is being edited (ForeignKey, ManyToManyField or CharField)\r\n+ *channel*:            the lookup channel to use for searches\r\n+ *show_help_text*:      [default False]  Whether to show the help text inside the widget itself.\r\n                        When using in AdminInline or outside of the admin then set it to True.\r\n+ *kwargs*:             Additional kwargs are passed on to the form field.\r\n    Of interest:\r\n        help_text=\"Custom help text\"\r\n    or:\r\n        # do not show any help at all\r\n        help_text=None\r\n\r\n    plugin_options - directly specify jQuery plugin options.  see Lookup plugin_options above\r\n\r\n\r\n#####Example\r\n\r\n    from ajax_select import make_ajax_field\r\n\r\n    class ReleaseForm(ModelForm):\r\n\r\n        class Meta:\r\n            model = Release\r\n\r\n        group  = make_ajax_field(Release, 'group', 'group', help_text=None)\r\n\r\n#### Without using the helper\r\n\r\n\r\n    from ajax_select.fields import AutoCompleteSelectField\r\n\r\n    class ReleaseForm(ModelForm):\r\n\r\n        group = AutoCompleteSelectField('group', required=False, help_text=None)\r\n\r\n#### Setting plugin options\r\n\r\n    from ajax_select.fields import AutoCompleteSelectField\r\n\r\n    class ReleaseForm(ModelForm):\r\n\r\n        group = AutoCompleteSelectField('group', required=False, help_text=None, plugin_options = {'autoFocus': True, 'minLength': 4})\r\n\r\n#### Using ajax selects in a `FormSet`\r\n\r\nThere is possibly a better way to do this, but here is an initial example:\r\n\r\n`forms.py`\r\n\r\n    from django.forms.models import modelformset_factory\r\n    from django.forms.models import BaseModelFormSet\r\n    from ajax_select.fields import AutoCompleteSelectMultipleField, AutoCompleteSelectField\r\n\r\n    from models import *\r\n\r\n    # create a superclass\r\n    class BaseTaskFormSet(BaseModelFormSet):\r\n\r\n        # that adds the field in, overwriting the previous default field\r\n        def add_fields(self, form, index):\r\n            super(BaseTaskFormSet, self).add_fields(form, index)\r\n            form.fields[\"project\"] = AutoCompleteSelectField('project', required=False)\r\n\r\n    # pass in the base formset class to the factory\r\n    TaskFormSet = modelformset_factory(Task, fields=('name', 'project', 'area'),extra=0, formset=BaseTaskFormSet)\r\n\r\n\r\n\r\ntemplates/\r\n----------\r\n\r\nEach form field widget is rendered using a template.  You may write a custom template per channel and extend the base template in order to implement these blocks:\r\n\r\n    {% block extra_script %}{% endblock %}\r\n    {% block help %}{% endblock %}\r\n\r\n<table>\r\n    <tr><th>form Field</th><th>tries this first</th><th>default template</th></tr>\r\n    <tr><td>AutoCompleteField</td><td>templates/autocomplete_{{CHANNELNAME}}.html</td><td>templates/autocomplete.html</td></tr> <tr><td>AutoCompleteSelectField</td><td>templates/autocompleteselect_{{CHANNELNAME}}.html</td><td>templates/autocompleteselect.html</td></tr>\r\n <tr><td>AutoCompleteSelectMultipleField</td><td>templates/autocompleteselectmultiple_{{CHANNELNAME}}.html</td><td>templates/autocompleteselectmultiple.html</td></tr>\r\n</table>\r\n\r\nSee ajax_select/static/js/ajax_select.js below for the use of jQuery trigger events\r\n\r\n\r\najax_select/static/css/ajax_select.css\r\n--------------------------------------\r\n\r\nIf you are using `django.contrib.staticfiles` then you can implement `ajax_select.css` and put your app ahead of ajax_select to cause it to be collected by the management command `collectfiles`.\r\n\r\nIf you are doing your own compress stack then of course you can include whatever version you want.\r\n\r\nThe display style now uses the jQuery UI theme and actually I find the drop down to be not very charming.  The previous version (1.1x) which used the external jQuery AutoComplete plugin had nicer styling.  I might decide to make the default more like that with alternating color rows and a stronger sense of focused item.  Also the current jQuery one wiggles.\r\n\r\nThe trashcan icon comes from the jQueryUI theme by the css classes:\r\n\r\n    \"ui-icon ui-icon-trash\"\r\n\r\nThe css declaration:\r\n\r\n    .results_on_deck .ui-icon.ui-icon-trash { }\r\n\r\nwould be \"stronger\" than jQuery's style declaration and thus you could make trash look less trashy.\r\n\r\n\r\najax_select/static/js/ajax_select.js\r\n------------------------------------\r\n\r\nYou probably don't want to mess with this one.  But by using the extra_script block as detailed in templates/ above you can add extra javascript, particularily to respond to event Triggers.\r\n\r\nTriggers are a great way to keep code clean and untangled. see: http://docs.jquery.com/Events/trigger\r\n\r\nTwo triggers/signals are sent: 'added' and 'killed'. These are sent to the $(\"#{{html_id}}_on_deck\") element. That is the area that surrounds the currently selected items.\r\n\r\nExtend the template, implement the extra_script block and bind functions that will respond to the trigger:\r\n\r\n##### multi select:\r\n\r\n    {% block extra_script %}\r\n        $(\"#{{html_id}}_on_deck\").bind('added',function() {\r\n                id = $(\"#{{html_id}}\").val();\r\n                alert('added id:' + id );\r\n        });\r\n        $(\"#{{html_id}}_on_deck\").bind('killed',function() {\r\n                current = $(\"#{{html_id}}\").val()\r\n                alert('removed, current is:' + current);\r\n        });\r\n    {% endblock %}\r\n\r\n##### select:\r\n\r\n    {% block extra_script %}\r\n        $(\"#{{html_id}}_on_deck\").bind('added',function() {\r\n                id = $(\"#{{html_id}}\").val();\r\n                alert('added id:' + id );\r\n        });\r\n        $(\"#{{html_id}}_on_deck\").bind('killed',function() {\r\n                alert('removed');\r\n        });\r\n    {% endblock %}\r\n\r\n##### auto-complete text field:\r\n\r\n    {% block extra_script %}\r\n        $('#{{ html_id }}').bind('added',function() {\r\n                entered = $('#{{ html_id }}').val();\r\n                alert( entered );\r\n        });\r\n    {% endblock %}\r\n\r\nThere is no remove as there is no kill/delete button in a simple auto-complete.\r\nThe user may clear the text themselves but there is no javascript involved. Its just a text field.\r\n\r\n\r\nContributors\r\n------------\r\n\r\nMany thanks to all who found bugs, asked for things, and hassled me to get a new release out.  I'm glad people find good use out of the app.\r\n\r\nIn particular thanks for help in the 1.2 version:  @sjrd (Sébastien Doeraene)\r\nAnd much thanks to @brianmay for assistance over many releases.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nDual licensed under the MIT and GPL licenses:\r\n   http://www.opensource.org/licenses/mit-license.php\r\n   http://www.gnu.org/licenses/gpl.html\r\n","google":"UA-154147-9","note":"Don't delete this file! It's used internally to help with page regeneration."}